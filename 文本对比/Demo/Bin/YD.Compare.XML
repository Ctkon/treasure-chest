<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YD.Compare</name>
    </assembly>
    <members>
        <member name="T:YD.Compare.ResultLine">
            <summary>
            表示一个比较结果行
            </summary>
        </member>
        <member name="F:YD.Compare.ResultLine.LineNumberA">
            <summary>
            对应数据A中的行号，如果无对应行，则为-1
            </summary>
        </member>
        <member name="F:YD.Compare.ResultLine.LineNumberB">
            <summary>
            对应数据B中的行号，如果无对应行，则为-1
            </summary>
        </member>
        <member name="F:YD.Compare.ResultLine.LineContentA">
            <summary>
            对应数据A中的内容
            </summary>
        </member>
        <member name="F:YD.Compare.ResultLine.LineContentB">
            <summary>
            对应数据B中的内容
            </summary>
        </member>
        <member name="F:YD.Compare.ResultLine.ResultState">
            <summary>
            该行的状态
            </summary>
        </member>
        <member name="T:YD.Compare.Diff">
            <summary>
            This Class implements the Difference Algorithm published in
            "An O(ND) Difference Algorithm and its Variations" by Eugene Myers
            Algorithmica Vol. 1 No. 2, 1986, p 251.  
            
            There are many C, Java, Lisp implementations public available but they all seem to come
            from the same source (diffutils) that is under the (unfree) GNU public License
            and cannot be reused as a sourcecode for a commercial application.
            There are very old C implementations that use other (worse) algorithms.
            Microsoft also published sourcecode of a diff-tool (windiff) that uses some tree data.
            Also, a direct transfer from a C source to C# is not easy because there is a lot of pointer
            arithmetic in the typical C solutions and i need a managed solution.
            These are the reasons why I implemented the original published algorithm from the scratch and
            make it avaliable without the GNU license limitations.
            I do not need a high performance diff tool because it is used only sometimes.
            I will do some performace tweaking when needed.
            
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. See DiffText(). 
            
            Some chages to the original algorithm:
            The original algorithm was described using a recursive approach and comparing zero indexed arrays.
            Extracting sub-arrays and rejoining them is very performance and memory intensive so the same
            (readonly) data arrays are passed arround together with their lower and upper bounds.
            This circumstance makes the LCS and SMS functions more complicate.
            I added some code to the LCS function to get a fast response on sub-arrays that are identical,
            completely deleted or inserted.
            
            The result from a comparisation is stored in 2 arrays that flag for modified (deleted or inserted)
            lines in the 2 data arrays. These bits are then analysed to produce a array of Item objects.
            
            Further possible optimizations:
            (first rule: don't do it; second: don't do it yet)
            The arrays DataA and DataB are passed as parameters, but are never changed after the creation
            so they can be members of the class to avoid the paramter overhead.
            In SMS is a lot of boundary arithmetic in the for-D and for-k loops that can be done by increment
            and decrement of local variables.
            The DownVector and UpVector arrays are alywas created and destroyed each time the SMS gets called.
            It is possible to reuse tehm when transfering them to members of the class.
            See TODO: hints.
            
            diff.cs: A port of the algorythm to C#
            Created by Matthias Hertel, see http://www.mathertel.de
            This work is licensed under a Creative Commons Attribution 2.0 Germany License.
            see http://creativecommons.org/licenses/by/2.0/de/
            
            Changes:
            2002.09.20 There was a "hang" in some situations.
            Now I undestand a little bit more of the SMS algorithm. 
            There have been overlapping boxes; that where analyzed partial differently.
            One return-point is enough.
            A assertion was added in CreateDiffs when in debug-mode, that counts the number of equal (no modified) lines in both arrays.
            They must be identical.
            
            2003.02.07 Out of bounds error in the Up/Down vector arrays in some situations.
            The two vetors are now accessed using different offsets that are adjusted using the start k-Line. 
            A test case is added. 
            
            2006.03.05 Some documentation and a direct Diff entry point.
            
            2006.03.08 Refactored the API to static methods on the Diff class to make usage simpler.
            2006.03.10 using the standard Debug class for self-test now.
                       compile with: csc /target:exe /out:diffTest.exe /d:DEBUG /d:TRACE /d:SELFTEST Diff.cs
            </summary>
        </member>
        <member name="M:YD.Compare.Diff.DiffText(System.String,System.String)">
            <summary>
            Find the difference in 2 texts, comparing by textlines.
            </summary>
            <param name="TextA">A-version of the text (usualy the old one)</param>
            <param name="TextB">B-version of the text (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:YD.Compare.Diff.DiffText(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Find the difference in 2 text documents, comparing by textlines.
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. This hash-value is computed by storing all
            textlines into a common hashtable so i can find dublicates in there, and generating a 
            new number each time a new textline is inserted.
            </summary>
            <param name="TextA">A-version of the text (usualy the old one)</param>
            <param name="TextB">B-version of the text (usualy the new one)</param>
            <param name="trimSpace">When set to true, all leading and trailing whitespace characters are stripped out before the comparation is done.</param>
            <param name="ignoreSpace">When set to true, all whitespace characters are converted to a single space character before the comparation is done.</param>
            <param name="ignoreCase">When set to true, all characters are converted to their lowercase equivivalence before the comparation is done.</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:YD.Compare.Diff.DiffInt(System.Int32[],System.Int32[])">
            <summary>
            Find the difference in 2 arrays of integers.
            </summary>
            <param name="ArrayA">A-version of the numbers (usualy the old one)</param>
            <param name="ArrayB">B-version of the numbers (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:YD.Compare.Diff.DiffCodes(System.String,System.Collections.Hashtable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function converts all textlines of the text into unique numbers for every unique textline
            so further work can work only with simple numbers.
            </summary>
            <param name="aText">the input text</param>
            <param name="h">This extern initialized hashtable is used for storing all ever used textlines.</param>
            <param name="trimSpace">When set to true, all leading and trailing whitespace characters are stripped out before the comparation is done.</param>
            <param name="ignoreSpace">When set to true, all whitespace characters are converted to a single space character before the comparation is done.</param>
            <param name="ignoreCase">When set to true, all characters are converted to their lowercase equivivalence before the comparation is done.</param>
            <returns>a array of integers.</returns>
        </member>
        <member name="M:YD.Compare.Diff.SMS(YD.Compare.DiffData,System.Int32,System.Int32,YD.Compare.DiffData,System.Int32,System.Int32)">
            <summary>
            This is the algorithm to find the Shortest Middle Snake (SMS).
            </summary>
            <param name="DataA">sequence A</param>
            <param name="LowerA">lower bound of the actual range in DataA</param>
            <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="DataB">sequence B</param>
            <param name="LowerB">lower bound of the actual range in DataB</param>
            <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
            <returns>a MiddleSnakeData record containing x,y and u,v</returns>
        </member>
        <member name="M:YD.Compare.Diff.LCS(YD.Compare.DiffData,System.Int32,System.Int32,YD.Compare.DiffData,System.Int32,System.Int32)">
            <summary>
            This is the divide-and-conquer implementation of the longes common-subsequence (LCS) 
            algorithm.
            The published algorithm passes recursively parts of the A and B sequences.
            To avoid copying these arrays the lower and upper bounds are passed while the sequences stay constant.
            </summary>
            <param name="DataA">sequence A</param>
            <param name="LowerA">lower bound of the actual range in DataA</param>
            <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="DataB">sequence B</param>
            <param name="LowerB">lower bound of the actual range in DataB</param>
            <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
        </member>
        <member name="M:YD.Compare.Diff.CreateDiffs(YD.Compare.DiffData,YD.Compare.DiffData)">
            <summary>Scan the tables of which lines are inserted and deleted,
            producing an edit script in forward order.  
            </summary>
            dynamic array
        </member>
        <member name="T:YD.Compare.Diff.SMSRD">
            <summary>
            Shortest Middle Snake Return Data
            </summary>
        </member>
        <member name="T:YD.Compare.DiffData">
            <summary>Data on one input file being compared.  
            </summary>
        </member>
        <member name="F:YD.Compare.DiffData.Length">
            <summary>Number of elements (lines).</summary>
        </member>
        <member name="F:YD.Compare.DiffData.data">
            <summary>Buffer of numbers that will be compared.</summary>
        </member>
        <member name="F:YD.Compare.DiffData.modified">
            <summary>
            Array of booleans that flag for modified data.
            This is the result of the diff.
            This means deletedA in the first Data or inserted in the second Data.
            </summary>
        </member>
        <member name="M:YD.Compare.DiffData.#ctor(System.Int32[])">
            <summary>
            Initialize the Diff-Data buffer.
            </summary>
            <param name="initData">reference to the buffer</param>
        </member>
        <member name="T:YD.Compare.Compare">
            <summary>
            比较两端文本
            </summary>
        </member>
        <member name="M:YD.Compare.Compare.#ctor(System.String,System.String)">
            <summary>
            构造一次比较
            </summary>
            <param name="dataA">数据A，通常为旧版本</param>
            <param name="dataB">数据A，通常为新版本</param>
        </member>
        <member name="M:YD.Compare.Compare.GetResult(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            取得比较结果
            </summary>
            <param name="isTrimSpace">是否忽略每行首位的空白</param>
            <param name="isIgnoreSpace">是否忽略所有的空白</param>
            <param name="isIgnoreCase">是否忽略大小写</param>
            <returns>比较结果，结果行的集合</returns>
        </member>
        <member name="M:YD.Compare.Compare.GetResult">
            <summary>
            取得比较结果，采用默认的参数，即：不忽略任何空白，大小写敏感
            </summary>
            <returns>比较结果，结果行的集合</returns>
        </member>
        <member name="M:YD.Compare.Compare.AddSameLines(System.Collections.Generic.List{YD.Compare.ResultLine},System.Int64,YD.Compare.DifferentItem)">
            <summary>
            取得相同的行
            </summary>
            <param name="resultLineList">结果行列表</param>
            <param name="lineNumberInB">当前B中的行数</param>
            <param name="differentItem">当前的不同之处</param>
            <returns>完成后重设的B的行数</returns>
        </member>
        <member name="M:YD.Compare.Compare.AddChangedLines(System.Collections.Generic.List{YD.Compare.ResultLine},System.Int64,YD.Compare.DifferentItem)">
            <summary>
            取得不相同的行
            </summary>
            <param name="resultLineList">结果行列表</param>
            <param name="lineNumberInB">当前B中的行数</param>
            <param name="differentItem">当前的不同之处</param>
            <returns>完成后重设的B的行数</returns>
        </member>
        <member name="M:YD.Compare.Compare.AddLastLines(System.Collections.Generic.List{YD.Compare.ResultLine},System.Int64,YD.Compare.DifferentItem)">
            <summary>
            添加剩余的行（相同）
            </summary>
            <param name="resultLineList">结果行列表</param>
            <param name="lineNumberInB">当前B中的行数</param>
            <param name="lastDifferentItem">最后一个不同之处</param>
        </member>
        <member name="T:CompareState">
            <summary>
            比较状态
            </summary>
        </member>
        <member name="F:CompareState.UnKnows">
            <summary>
            未知，未经过比较
            </summary>
        </member>
        <member name="F:CompareState.Same">
            <summary>
            两行相同
            </summary>
        </member>
        <member name="F:CompareState.Different">
            <summary>
            两行有差别
            </summary>
        </member>
        <member name="F:CompareState.Insert">
            <summary>
            新插入的行
            </summary>
        </member>
        <member name="F:CompareState.Delete">
            <summary>
            被删除的行
            </summary>
        </member>
        <member name="T:YD.Compare.DifferentItem">
            <summary>
            一项不同之处
            </summary>
        </member>
        <member name="F:YD.Compare.DifferentItem.StartA">
            <summary>
            该不同之处在数据A中的起始行
            </summary>
        </member>
        <member name="F:YD.Compare.DifferentItem.StartB">
            <summary>
            该不同之处在数据B中的起始行
            </summary>
        </member>
        <member name="F:YD.Compare.DifferentItem.deletedA">
            <summary>
            在A中删掉的行数
            </summary>
        </member>
        <member name="F:YD.Compare.DifferentItem.insertedB">
            <summary>
            在B中插入的行数
            </summary>
        </member>
    </members>
</doc>
